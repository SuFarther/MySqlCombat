【SQL数据库基础04】数据操纵语言DML，即SQL的增删改查【SQL数据库基础04】数据操纵语言DML，即SQL的增删改查

数据操作语言:

插入: insert

修改: update

删除: delete

一、插入语句

方式一: 经典的插入

语法:

insert into 表名(列名,...) values(值1,...);

SELECT * FROM beauty;


1.插入的值的类型要与列的类型一致或兼容
INSERT INTO beauty(id,name,sex,borndate,phone,photo,boyfriend_id) VALUES (13,"唐艺昕",'女','1994-4-23','1898888888',NULL,2);


2.不可以为null的列必须插入值。可以为null的列如何插入值？
INSERT INTO beauty (id,NAME,sex,phone) VALUES (15,'娜扎','女','1388888888');


3.列的顺序是否可以调换
INSERT INTO beauty(name,sex,id,phone) VALUES ('蒋欣','女',14,'110');


4.列数和值的个数必须一致
INSERT INTO beauty(name,sex,id,phone) VALUES ('关晓彤','女',23,'110');

5.可以省略列名，默认所有列，而且列的顺序和表中列的顺序一致
INSERT INTO beauty VALUES (18,'张飞','男',NULL,'119',NULL,NULL);


方式二：针对性的SET
语法：

insert into 表名

set 列名=值,列名=值,…

例子：
INSERT INTO beauty SET id = 16,name  = "吴亦凡",phone = "120";


两种方式大pk
1、方式一支持插入多行,方式二不支持
INSERT INTO beauty VALUES (19,'张无忌','男',NULL,'119',NULL,NULL),(20,'范冰冰','女',NULL,'119',NULL,NULL),(21,'彭小冉','女',NULL,'130',NULL,NULL);



方式一支持子查询，方式二不支持
INSERT INTO beauty (id,NAME,phone) VALUES (26,'宋茜','11809866');

这也是为什么方式一更常用的重要原因



2.1 语法介绍
1.修改单表的记录★
语法：

update 表名

set 列=新值,列=新值,…

where 筛选条件;

2.修改多表的记录【补充】
语法：

sql92语法：

update 表1 别名,表2 别名

set 列=值,…

where 连接条件

and 筛选条件;

sql99语法：

update 表1 别名

inner|left|right join 表2 别名

on 连接条件

set 列=值,…

where 筛选条件;

2.2 案例实践
1.修改单表的记录

#案例1：修改beauty表中姓唐的女神的电话为13899888899
UPDATE beauty SET phone = '13899888899' WHERE name LIKE '唐%';


#案例2: 修改boys表中id好为2的名称为张飞，魅力值 10
UPDATE boys 
SET boyname='张飞',usercp=10 WHERE id=2;

2.修改多表的记录
#案例 1：修改张无忌的女朋友的手机号为114
UPDATE boys bo INNER JOIN beauty b ON bo.id=b.boyfriend_id 
SET b.phone='114',bo.`userCP`=1000 WHERE bo.boyName="张无忌";


#案例2：修改没有男朋友的女神的男朋友编号都为2号
UPDATE boys bo RIGHT JOIN beauty b ON bo.id=b.boyfriend_id 
SET b.boyfriend_id=2 WHERE bo.id IS NULL;


3.1 两种方式
方式一：delete
语法：

1、单表的删除【★】

delete from 表名 where 筛选条件

2、多表的删除【补充】

sql92语法：

delete 表1的别名,表2的别名

from 表1 别名,表2 别名

where 连接条件

and 筛选条件;

sql99语法：

delete 表1的别名,表2的别名

from 表1 别名

inner|left|right join 表2 别名 on 连接条件

where 筛选条件;

方式二：truncate
语法：truncate table 表名;

3.2 案例实践
方式一：delete

1.单表的删除
#案例：删除手机号以6结尾的女神信息
DELETE FROM beauty WHERE phone LIKE '%6';

2.多表的删除
#案例：删除张无忌的女朋友的信息
SELECT b.* FROM beauty  b INNER JOIN boys bo ON b.boyfriend_id = bo.id;

DELETE b FROM beauty  b INNER JOIN boys bo ON b.boyfriend_id = bo.id WHERE bo.boyName = '张无忌';


#案例：删除黄晓明的信息以及他女朋友的信息
DELETE b,bo FROM beauty b INNER JOIN boys bo ON b.boyfriend_id = bo.id WHERE bo.boyName = '黄晓明';

#案例：将魅力值>100的男神信息删除
TRUNCATE TABLE boys; 


区别：delete & truncate【面试题★】

1、delete可以加where条件,truncate不能加
2、truncate删除,效率高一丢丢
3、假如要删除的表中有自增长列,
如果用delete删除后,再插入数据,自增长列的值从断点开始,
而truncate删除后,再插入数据,自增长列的值从1开始
4、truncate删除没有返回值,delete删除有返回值
5.truncate删除不能回滚，delete删除可以回滚.



SELECT * FROM boys;

DELETE FROM boys;

TRUNCATE TABLE boys;

INSERT INTO boys (boyname,usercp) VALUES ('张飞',100),('刘备',100),('关云长',100);

四、案例实操
1. 运行以下脚本创建表my_employees
USE myemployees;
CREATE TABLE my_employees(
	Id INT(10),
	First_name VARCHAR(10),
	Last_name VARCHAR(10),
	Userid VARCHAR(10),
	Salary DOUBLE(10,2)
);
CREATE TABLE users(
	id INT,
	userid VARCHAR(10),
	department_id INT
);

2. 显示表my_employees的结构
DESC my_employees;

3. 向my_employees表中插入下列数据
INSERT INTO my_employees VALUES(1,'patel','Ralph','Rpatel',895),
(2,'Dancs','Betty','Bdancs',895),
(3,'Biri','Ben','Bbiri',895),
(4,'Newman','Chad','Cnewman',895),
(5,'Ropeburn','Audrey','Aropebur',895);


TRUNCATE TABLE my_employees;

INSERT INTO my_employees
SELECT 1,'patel','Ralph','Rpatel',895 UNION
SELECT 2,'Dancs','Betty','Bdancs',860 UNION
SELECT 3,'Biri','Ben','Bbiri',1100 UNION
SELECT 4,'Newman','Chad','Cnewman',750 UNION
SELECT 5,'Ropeburn','Audrey','Aropebur',1550;

4. 向users表中插入数据
INSERT INTO users VALUES (1,'Rpatel',10),(2,'Bdancs',10),(3,'Bbiri',20),(4,'Cnewman',30),(5,'Aropebur',40);


5.将3号员工的last_name修改为“drelxer”
UPDATE my_employees SET Last_name = 'drelxer' WHERE id = 3;


6.将所有工资少于900的员工的工资修改为1000
UPDATE my_employees SET Salary = 1000 WHERE Salary<900;

7.将userid 为Bbiri的user表和my_employees表的记录全部删除
DELETE u,e FROM users u JOIN my_employees e  ON u.userid =  e.Userid WHERE u.userid = "Bbiri";


8.删除所有数据
DELETE FROM my_employees;
DELETE FROM users;

9.检查所作的修正
SELECT * FROM my_employees;
SELECT * FROM users;

10.清空表my_employees
TRUNCATE TABLE my_employees;


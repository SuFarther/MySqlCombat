# p61 MYSQL基础_分组查询-添加分组前筛选

# 案例： 查询邮箱包含a字符的,每个部门平均工资
SELECT ROUND(AVG(salary),2) "平均工资",department_id "部门编号" FROM employees WHERE email LIKE "%a%"  GROUP BY department_id;

# 案例： 查询有奖金每个领导手下员工的最高工资
SELECT MAX(salary) "最高工资",manager_id "上级领导员工编号" FROM employees  WHERE commission_pct IS NOT NULL GROUP BY manager_id;


# p62 添加分组后的筛选

# 查询1: 查询哪个部门的员工个数>2
SELECT COUNT(*) "员工个数" FROM employees GROUP BY department_id HAVING COUNT(*)>2;


# 查询每个工种有奖金的员工最高>12000的工种编号和最高工资
SELECT job_id  "工种编号",MAX(salary) "最高工资" FROM employees WHERE  commission_pct IS NOT NULL  GROUP BY  job_id HAVING MAX(salary)>12000;


# 查询领导编号>102的每个领导手下的最低工资>5000领导编号是哪个,以及最低工资
SELECT manager_id "领导编号",MIN(salary) "最低工资" FROM employees WHERE manager_id > 102 GROUP BY manager_id HAVING AVG(salary) > 5000; 

/**
* 特点:
*     1、分组查询中的 筛选条件为两类
*                数据源              位置                   关键字
* 分组前筛选       原始表              group by字句的前面     where
* 分组后筛选       分组后的结果集       group by字句后面       having
*  
*   1⃣️分组函数做条件肯定是放在having字句中
*   2⃣️能用分组筛选,就优先考虑分组前
*
*   2.group by子句支持单个字段分组,每个字段分组（每个字段之间用逗号隔开没有顺序要求） 表达式或函数用的较少
*   3.也可以添加排序(排序放在整个入组查询的最后)
*
*   
*/


# 64 MYSQL基础—分组查询-按函数分组
# 按表达式分组或函数 

#  案例: 按员工姓名的长度分组,查询某一组的员工个个数，筛选员工个数>5有哪些
SELECT COUNT(*) "员工个数",LENGTH(last_name) "员工姓名长度" FROM employees GROUP BY LENGTH(last_name) HAVING COUNT(*)>5;

#65 MYSQL基础-分组查询-按多个字段分组
# 案例: 查询每个部门每个工种的员工的平均工资
SELECT AVG(salary) "平均工资",department_id "部门编号",job_id "工种编号" FROM employees GROUP BY department_id,job_id;

#66  MYSQL基础—分组查询-添加排序 
# where->先分组group by-筛选 having -后排序 order
# 查询每个部门每个工种员工平均工资,并且按平均工资的高低显示
SELECT AVG(salary) "平均工资",department_id "部门编号",job_id "工种编号" FROM employees GROUP BY department_id,job_id ORDER BY AVG(salary) DESC ;

#p68 案例讲解
# 查询公司员工工资的最大值，最小值，平均值，总和
SELECT MAX(salary) "最大值",MIN(salary) "最小值", AVG(salary) "平均值",SUM(salary) "总和" FROM employees;

# 查询员工表中的最大入职时间和最小入职时间的相差天数 （DIFFRENCE）
SELECT DATEDIFF(MAX(hiredate),MIN(hiredate)) FROM employees DIFFRENCE;

# 查询部门编号为 90 的员工个数
SELECT COUNT(*) "员工个数" FROM employees WHERE department_id = 90;


/**
*
*   p69 MYSQL基础_连接查询
*    
*  进阶6  连接查询
*  含义: 称多表查询,当查询的字段来自于多个表时，就会用到连接查询
*
*   笛卡尔乘积现象： 表1 有m行,表2有n行,结果=m*n发生原因：没有有效连接条件 
*    发生原因： 没有有效连接条件
*    如何避免: 添加有类的连接条件
*   
*  分类:
*   按年代分类：
*    sql92标准： （仅连接内连接）
*    sql99标准(推荐): 支持内连+连接（左外和右外）+有效连接
*    按功能分类：
*       内连接：等值连接 非等值连接 自连接
*       外连接： 左外连接 右外连接 全外连接
*  
*   交叉连接：
*
*   
*    
*   
*/   


# MYSQL基础- 等值连接


# 一、sql92标准
#等值连接


# 案例: 查询女神名和对应的男神名
SELECT  name,boyName FROM beauty,boys  WHERE beauty.boyfriend_id =  boys.id;

# 查询员工名和对应的部门名
SELECT last_name "员工名",department_name "部门名" FROM employees e,departments d WHERE e.department_id=d.department_id;

# 查询员工名、工种号、工种名
SELECT last_name "员工名",e.job_id "工种号",job_title "工种名" FROM employees e,jobs j WHERE e.job_id = j.job_id;

/*
*  
*  为表起别名
*  1⃣️提高语句的简洁度
*  2⃣️区分多个重名的字段
*    
*   注意：如果为表起了别名，则查询的字段不能使用原来的表来限定
*/   


# MYSQL基础- 等值连接示例
#4.可以加筛选？

# 案例1: 查询有奖金的员工名、部门名
SELECT last_name "员工名",department_name "部门名" FROM employees e,departments d WHERE e.department_id=d.department_id AND commission_pct IS NOT NULL;

# 查询城市中第2个字符为‘o’的部门名和城市名
SELECT department_name "部门名",city "城市名" FROM departments d,locations l WHERE d.location_id = l.location_id AND city LIKE '%_o%';


# 可以加分组？

#案例1:查询每个城市部门个数
SELECT COUNT(*) "部门个数" FROM departments d,locations l WHERE d.location_id = l.location_id GROUP BY city; 

# 案例2: 查询有奖金的每个部分的部门名和部门的领导编号和该部门的最低工资
SELECT d.department_name "部门名",e.manager_id "部门的领导编号",MIN(salary) "该部门的最低工资"
FROM departments d,employees  e WHERE d.department_id = e.department_id
AND commission_pct IS NOT NULL GROUP BY department_name,e.manager_id;

# 可以加排序

# 案例： 查询每个工种的工种名和员工个数,并且按员工个数降序
SELECT job_title "工种名",COUNT(*) "员工个数" FROM jobs j,employees e WHERE j.job_id = e.job_id GROUP BY job_title ORDER BY COUNT(*) DESC;


# 7.可以实现三表连接？

# 案例: 查询员工名，部门名和所在的城市
SELECT last_name "员工名",d.department_id "部门名",city "所在的城市" FROM employees e,departments d,locations l
WHERE e.department_id = d.department_id AND d.location_id = l.location_id;


 r


# MYSQL基础- 非等值连接
# 案例 查询员工的工资和工资级别
SELECT salary "员工的工资",grade_level "工资级别"  FROM employees e,job_grades j WHERE salary BETWEEN lowest_sal AND highest_sal;


#74 自连接
#  案例  员工名和上级名称
SELECT e.employee_id,e.last_name,m.employee_id,m.last_name  FROM employees e,employees m WHERE e.manager_id = m.employee_id;

# 测试案例
# 显示所有员工的姓名，部门号和部门名称
SELECT last_name "员工的姓名",d.department_id "部门号",department_name "部门名称" FROM employees e,departments d WHERE e.department_id = d.department_id;
 
#查询 90 号部门员工的 job_id 和 90 号部门的 location_id 
SELECT job_id,location_id FROM employees e,departments d WHERE e.department_id = d.department_id AND e.department_id = 90 AND d.department_id =90;

# 选择所有有奖金的员工的last_name , department_name , location_id , city

SELECT last_name "员工名",department_name "部门名",d.location_id "位置编号",city "城市名" FROM employees e,departments d,locations l
WHERE e.department_id = d.department_id AND d.location_id = l.location_id AND commission_pct IS NOT NULL;

/*
*  p78 MYSQL sql99语法
* 语法： 
*
*   select 查询列表 from 表 1 别名(连接类型) join 表2 别名 on 连接条件 where 筛选条件 group by 分组 having 筛选条件 order by 排序列表
*
*   分类:
*     内连接： inner
*     外连接   
*         左外 left outer
*         右外 right outer
*         全外  full outer
*        
*    交叉连接： cross
*
*    #p79 sql99语法-等值连接
*    一） 内连接
*    语法：
*      select 查询列表 from 表1 别名 inner join 表2 别名 on 连接条件
*    分类：
*       等值 非等值 自连接
*
*/   

# 案例1 查询员工名、部门名
SELECT last_name "员工名",department_name "部门名"  FROM employees e INNER JOIN departments d on e.department_id = d.department_id;

# 查询名字包含e的员工名和工种名
SELECT last_name "员工名",department_name "部门名"  FROM employees e INNER JOIN departments d on e.department_id = d.department_id;

# 查询部门个数>3城市名和部门个数
SELECT city "城市名",COUNT(*) "部门个数" FROM locations l INNER JOIN departments d ON l.location_id = d.location_id GROUP BY city HAVING  COUNT(*)>3;

# 查询哪个部门员工个数>3的部门名和员工个数,并按个数降序
SELECT department_name "部门名",COUNT(*) "员工个数" FROM departments d INNER JOIN employees e ON d.department_id=e.department_id GROUP BY department_name HAVING COUNT(*)> 3 ORDER BY COUNT(*) DESC;

# 查询员工名、部门名、工种名,并按部门名排序
SELECT last_name "员工名",department_name "员工名",job_title "工种名" FROM employees e INNER JOIN departments d ON e.department_id = d.department_id
INNER JOIN jobs j ON  e.job_id = j.job_id ORDER BY  department_name DESC;


/**
*  多表要有连接条件
*    1、特点:
*       1⃣️ 添加排序、分组、筛选
*       2⃣️ inner可以省略
*       3⃣️ 筛选条件在where后面,连接条件放在on后面,提高分离性,便于阅读
*       4⃣️ inner join连接和sql92语法中的等值连接都一样,都是查询多表的交集
*
*
*
*/


#自连接


# 查询员工的名字、上级名字
SELECT e.last_name "员工编号",e.department_id "上级领导编号",m.last_name "员工编号",m.department_id "上级领导编号"  FROM employees e,employees m
WHERE e.employee_id = m.department_id;

# 查询姓名中包含k的员工的名字、上级名字
SELECT e.last_name "员工编号",e.department_id "上级领导编号",m.last_name "员工编号",m.department_id "上级领导编号"  FROM employees e,employees m
WHERE e.employee_id = m.department_id AND e.last_name LIKE "%k%";


# p82 MYSQL基础 _s99语法_左右外连接